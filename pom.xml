<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.yyz</groupId>
	<artifactId>girl</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>${packaging.env}</packaging>

	<name>girl</name>
	<description>Demo project for Spring Boot</description>

	<!--spring boot启动父依赖-->
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.5.2.RELEASE</version>
		<relativePath/> <!-- lookup parent from com.yyz.girl.dao -->
	</parent>

	<!--SpringBoot统一版本控制-->
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
		<lombok.version>1.18.2</lombok.version>
		<junit.version>4.12</junit.version>
		<commons.version>2.5</commons.version>

	</properties>

	<dependencies>
		<dependency>
			<!--web项目需要引入的包-->
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<!--移除嵌入式tomcat插件-->
			<!--<exclusions>
				<exclusion>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-tomcat</artifactId>
				</exclusion>
			</exclusions>-->
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<!--添加调试工具-->
		<!--<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<optional>true</optional>
		</dependency>-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
		</dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-aop</artifactId>
        </dependency>
		<!--lombok依赖包,优化项目的getter,setter方法-->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>${lombok.version}</version>
		</dependency>
		<!--添加单元测试依赖包-->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
		</dependency>
		<!--添加第三方tomcat的servlet-api依赖-->
		<!--<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>3.1.0</version>
			<scope>provided</scope>
		</dependency>-->
		<!--添加freemarker依赖-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-freemarker</artifactId>
		</dependency>
		<dependency>
			<groupId>commons-lang</groupId>
			<artifactId>commons-lang</artifactId>
			<version>${commons.version}</version>
		</dependency>
		<dependency>
			<groupId>org.json</groupId>
			<artifactId>json</artifactId>
			<version>RELEASE</version>
		</dependency>
		<!--集成redis-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-redis</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-pool2</artifactId>
		</dependency>
		<!--spring session共享-->
		<dependency>
			<groupId>org.springframework.session</groupId>
			<artifactId>spring-session-data-redis</artifactId>
		</dependency>
		<!--mybatis依赖-->
		<dependency>
			<groupId>org.mybatis.spring.boot</groupId>
			<artifactId>mybatis-spring-boot-starter</artifactId>
			<version>1.2.0</version>
		</dependency>

		<!--导入配置文件依赖,添加配置文件时会有提示信息-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<optional>true</optional>
		</dependency>
		<!--引人aop-log依赖,日志收集和处理工具包-->
		<dependency>
			<groupId>com.github.ealenxie</groupId>
			<artifactId>aop-log</artifactId>
			<version>2.1</version>
		</dependency>
	</dependencies>

	<!--spring boot添加不同的maven编译环境,配置profiles-->
	<profiles>
		<profile>
			<id>dev</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<packaging.env>jar</packaging.env>
				<jar.source>${java.version}</jar.source>
				<jar.target>${java.version}</jar.target>
				<env>dev</env>
			</properties>
			<build>
				<resources>
					<resource>
						<directory>src/main/resources</directory>
						<filtering>true</filtering>
						<excludes>
							<exclude>application.yml</exclude>
							<exclude>application-${env}.yml</exclude>
						</excludes>
					</resource>
				</resources>
			</build>
		</profile>
		<profile>
			<id>prod</id>
			<properties>
				<packaging.env>war</packaging.env>
				<jar.source>${java.version}</jar.source>
				<jar.target>${java.version}</jar.target>
				<env>prod</env>
			</properties>
			<build>
				<resources>
					<resource>
						<directory>src/main/resources</directory>
						<filtering>true</filtering>
						<excludes>
							<exclude>application.yml</exclude>
							<exclude>application-${env}.yml</exclude>
						</excludes>
					</resource>
				</resources>
			</build>
		</profile>
	</profiles>
	<build>
		<finalName>girl</finalName>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<!--<configuration>
					&lt;!&ndash;fork : 如果没有该项配置，肯呢个devtools不会起作用，即应用不会restart &ndash;&gt;
					<fork>true</fork>
				</configuration>-->
			</plugin>
			<!--添加maven编译依赖,解决使用更高版本的diamond运算符问题-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
					<encoding>utf-8</encoding>
				</configuration>
			</plugin>
			<!--添加maven-surefire-plugin插件-->
			<!--<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<skip>true</skip>
				</configuration>
			</plugin>-->
			<!--添加war包部署依赖-->
			<plugin>
				<artifactId>maven-war-plugin</artifactId>
				<version>3.2.0</version>
				<configuration>
					<failOnMissingWebXml>false</failOnMissingWebXml>
				</configuration>
			</plugin>

			<!--不同环境打包不同的配置文件依赖插件-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.6</version>
				<executions>
					<execution>
						<id>copy-resources</id>
						<!--存放不同环境的配置文件若在src/main/resources目录下,则使用complie阶段,否则一般使用validate-->
						<phase>validate</phase>
						<!--资源文件处理resources目录下时,使用compile阶段,因为测试发现resources下的资源在validate之后compile之前拷贝,为了保证
						指定环境的资源文件在resources拷贝之后执行-->
						<!--<phase>compile</phase>-->
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<!--强制覆盖原有文件-->
							<overwrite>true</overwrite>
							<!--输出文件目录-->
							<outputDirectory>${project.build.outputDirectory}</outputDirectory>
							<!--各个环境打包的资源-->
							<resources>
								<resource>
									<!--指定需要处理的资源文件目录-->
									<directory>src/main/deploy/${env}</directory>
									<!--资源文件处理resources目录下时-->
									<!--<directory>src/main/resources/deploy/${env}</directory>-->
									<filtering>false</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>


</project>
